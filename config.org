#+TITLE: Josuke Bukin config file
* Подключим пакетный менеджер
#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("melpa" . "https://melpa.org/packages/")
          ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (setq use-package-always-ensure t)
  (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  (eval-when-compile (require 'use-package))
  (setq use-package-hook-name-suffix nil)
#+END_SRC
* Проверка синтаксиса
#+begin_src emacs-lisp
  (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode))
  (add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src
* Внешний вид
** Шрифты
#+begin_src emacs-lisp
  (set-frame-font "Fira Code Nerd Font 12")
  (setq default-frame-alist '((font . "Fira Code Nerd Font 12")))
#+end_src
** Отключение компонентов GUI
#+begin_src emacs-lisp
  (tooltip-mode      -1)
  (menu-bar-mode     -1)
  (tool-bar-mode     -1)
  (scroll-bar-mode   -1)
  (blink-cursor-mode -1)
  (setq use-dialog-box     nil) ;; Отключение графических диалогов и окон
  (setq redisplay-dont-pause t) ;; Лучшая отрисовка буфера
  (setq ring-bell-function 'ignore) ;; Отключить звуковой сигнал
#+end_src
** Номера строк
*** Linum-relative(номера строк как в Vim)
#+begin_src emacs-lisp
  (use-package linum)
  (use-package linum-relative
      :ensure t
      :config
      (setq linum-relative-backend 'display-line-numbers-mode)
      (linum-relative-on))
#+end_src
** Splash экран  
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines :ensure t)
  (use-package all-the-icons :ensure t)
  (use-package dashboard
      :ensure t
      :config
      (setq show-week-agenda-p t)
      (setq dashboard-items '((recents . 15) (agenda . 5) (projects . 5)))
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-startup-banner 3)
      (dashboard-setup-startup-hook)
      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
  (provide 'splash)
#+END_SRC
** Настроим mode-line
#+begin_src emacs-lisp
  (setq display-time-24hr-format t) ;; 24-часовой формат в mode-line
  (display-time-mode             t) ;; показывать время
  (size-indication-mode          t) ;; размер файла в процентах
#+end_src
** Темы DOOM
#+begin_src emacs-lisp
  (use-package doom-modeline
      :ensure t
      :init
      (doom-modeline-mode 1))
#+end_src
** Modus темы
#+begin_src emacs-lisp
  (use-package modus-themes
      :ensure t
      :init
      (setq modus-themes-italic-constructs t
            modus-themes-bold-constructs t
            modus-themes-mixed-constructs t
            modus-themes-org-blocks 'gray-background)
      :config
      (load-theme 'modus-operandi)
      :bind
      ("<f5>" . modus-themes-toggle))
#+end_src
** Короткие сообщения
#+begin_src emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
** Подсветка результатов поиска
#+begin_src emacs-lisp
  (setq search-highlight        t)
  (setq query-replace-highlight t)
#+end_src
** Размер окна
#+begin_src emacs-lisp
  (setq frame-resize-pixelwise t)
  (set-frame-size (selected-frame) 1920 1080 t)
#+end_src
** Beacon
#+begin_src emacs-lisp
  (use-package beacon
      :ensure t
      :init
      (beacon-mode 1))
#+end_src
* Менеджмент файлов
** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
      :ensure t
      :bind ("<f8>" . treemacs))
#+end_src
** Dired
#+begin_src emacs-lisp
  (require 'dired)
  (setq dired-recursive-deletes 'top) ;; чтобы можно было удалять непустые директории
#+end_src
* Интеграция с ЯП по типу IDE
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
      :ensure t
      :config
      (setq vterm-toggle-scope 'projectile)
      (projectile-mode +1))
#+END_SRC 
** EMACS-LSP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
      :ensure t
      :init
      (setq lsp-keymap-prefix "C-c l")
      :hook
      (lsp-mode . lsp-enable-which-key-integration)
      (haskell-mode-hook . lsp)
      (c-mode-hook . lsp)
      (c++-mode-hook . lsp)
      (python-mode-hook . lsp)
      (go-mode-hook . lsp)
      (clojure-mode-hook . lsp)
      (clojurescript-mode-hook . lsp)
      (clojurec-mode-hook . lsp)
      (dart-mode-hook . lsp)
      (latex-mode-hook . lsp)
      :commands lsp
      :custom
      ;; what to use when checking on-save. "check" is default, I prefer clippy
      (lsp-rust-analyzer-cargo-watch-command "clippy")
      (lsp-eldoc-render-all t)
      (lsp-idle-delay 0.6)
      (lsp-rust-analyzer-server-display-inlay-hints t)
      :config
      (add-hook 'lsp-mode-hook 'lsp-ui-mode))
  (use-package lsp-ui
      :ensure t
      :commands lsp-ui-mode
      :custom
      (lsp-ui-peek-always-show nil)
      (lsp-ui-sideline-show-hover t)
      (lsp-ui-doc-enable t))
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
(use-package go-mode
:ensure t
(autoload 'go-mode "go-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.go\\'" . go-mode)))
#+END_SRC emacs-lisp
** Java
#+BEGIN_SRC emacs-lisp
(use-package java-lsp 
:ensure t
:config (add-hook 'java-mode-hook 'lsp))
#+END_SRC emacs_lisp
** Rust
*** Rustic
#+BEGIN_SRC emacs-lisp
  (use-package rustic 
      :ensure t
      :bind (:map rustic-mode-map
                  ("M-j" . lsp-ui-imenu)
                  ("M-?" . lsp-find-reference)
                  ("C-c C-c l" . flycheck-list-errors)
                  ("C-c C-c a" . lsp-execute-code-action)
                  ("C-c C-c r" . lsp-rename)
                  ("C-c C-c q" . lsp-workspace-restart)
                  ("C-c C-c Q" . lsp-workspace-shutdown)
                  ("C-c C-c s" . lsp-rust-analyzer-status))
      :config
      ;; uncomment for less flashiness
      (setq lsp-eldoc-hook nil)
      (setq lsp-enable-symbol-highlighting nil)
      ;; (setq lsp-signature-auto-activate nil)

      ;; comment to disable rustfmt on save
      (setq rustic-format-on-save t)
      (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
      ;; so that run C-c C-c C-r works without having to confirm, but don't try to
      ;; save rust buffers that are not file visiting. Once
      ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
      ;; no longer be necessary.
      (when buffer-file-name
          (setq-local buffer-save-without-query t)))
#+END_SRC
** CIDER
#+BEGIN_SRC emacs-lisp
  (use-package cider
      :after clojure-mode
      :ensure t)
  (use-package clojure-mode
      :ensure t)
#+END_SRC
** Flutter
#+BEGIN_SRC emacs-lisp
  (use-package dart-mode
      :ensure t)
  (use-package lsp-dart
      :after projectile
      :ensure t
      :config
      (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
      (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t)
#+END_SRC
* Автодополнение
** Company-mode
#+begin_src emacs-lisp
  (use-package company)
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'go-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+end_src
** Vertico
#+begin_src emacs-lisp
  (use-package vertico
      :ensure t
      :custom
      (vertico-cycle t)
      :init
      (setq completion-styles '(substring basic flex))
      (vertico-mode))
  (use-package savehist
      :init
      (savehist-mode))
  (use-package marginalia
      :after vertico
      :ensure t
      :custom
      (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
      :init
      (marginalia-mode))
#+end_src
* Работа с LaTeX
#+BEGIN_SRC emacs-lisp
  (use-package auctex
      :defer t
      :ensure t
      :config
      (setq reftex-plug-into-AUCTeX t)
      (add-hook 'LaTeX-mode-hook 'flyspell-mode)
      :init)
  (use-package company-auctex
      :ensure t
      :init
      (company-auctex-init))
#+END_SRC
* Управление
** Отступы
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil) ;; отключить возможность ставить отступы TAB'ом
  (setq-default tab-width          4) ;; ширина табуляции - 4 пробела

  (setq-default c-basic-offset     4)
  (setq-default standart-indent    4) ;; стандартная ширина отступа - 4 пробела
  (setq-default lisp-body-indent   4) ;; сдвигать Lisp-выражения на 4 пробела
  (global-set-key (kbd "RET") 'newline-and-indent) ;; при нажатии Enter перевести каретку и сделать отступ
  (setq lisp-indent-function  'common-lisp-indent-function)
#+end_src
** Управление буферами
#+begin_src emacs-lisp
  (use-package bs)
  (use-package ibuffer
      :bind ("<f2>" . bs-show) ;; запуск buffer-selection кнопкой F2
      :init
      (defalias 'list-buffers 'ibuffer)) ;; отдельный список буферов при нажатии C-x C-b
#+end_src
** Electric-mode(((скобочки)))
#+begin_src emacs-lisp
  (electric-pair-mode    1) ;; автозакрытие скобок
  (electric-indent-mode -1) ;; отключить индентацию
  (show-paren-mode       1) ;; подсветка скобок
#+end_src
** Общий с системой буфер обмена
#+begin_src emacs-lisp
  (setq x-select-enable-clipboard t)
  (setq interprogram-paste-fupnction 'x-cut-buffer-or-selection-value) 
#+end_src
* Прикольчики
** Удаление выделенного текста при вводе нового
#+begin_src emacs-lisp
  ;;  (delete-selection-mode t)
#+end_src
** Кодировка
#+begin_src emacs-lisp
  (set-language-environment 'UTF-8)
#+end_src

** Org-mode
#+begin_src emacs-lisp
  (use-package org
      :init
      (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
      (define-key global-map "\C-cl" 'org-store-link)
      (define-key global-map "\C-ca" 'org-agenda)
      (setq org-log-done t)
      (custom-set-variables
       '(org-agenda-files (list "~/Notes/org-notes" "~/Notes/roam-notes"))))
#+end_src
** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
      :ensure t
      :init
      (setq org-roam-v2-ack t)
      :custom
      (org-roam-directory "~/Notes/roam-notes")
      (org-roam-dailies-directory "journals/")
      (org-roam-completion-everywhere t)
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n i" . org-roam-node-insert)
             :map org-mode-map
             ("C-M-i" . completion-at-point)
             :map org-roam-dailies-map))
#+end_src
** "package cl is deprecated"
#+begin_src emacs-lisp
  (setq byte-compile-warnings '(cl-functions))
#+end_src

** Отключить бэкапы
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/backup")))
  (setq auto-save-default nil)
#+END_SRC
** Vterm
#+BEGIN_SRC emacs-lisp
  (use-package vterm
      :ensure t
      :bind (:map vterm-mode-map ("C-y" . vterm-yank)))
#+END_SRC
** reverse-im (использование нестандартной раскладки в биндах)
#+BEGIN_SRC emacs-lisp
  (use-package char-fold
      :custom
      (char-fold-symmetric t)
      (search-default-mode #'char-fold-to-regexp))

  (use-package reverse-im
      :ensure t ; install `reverse-im' using package.el
      :demand t ; always load it
      :after char-fold ; but only after `char-fold' is loaded
      :bind
      ("M-T" . reverse-im-translate-word) ; fix a word in wrong layout
      :custom
      (reverse-im-char-fold t) ; use lax matching
      (reverse-im-read-char-advice-function #'reverse-im-read-char-include)
      (reverse-im-input-methods '("russian-computer")) ; translate these methods
      :config
      (reverse-im-mode t)) ; turn the mode on
#+END_SRC
** which-key (подсказки для биндов)
#+BEGIN_SRC emacs-lisp
  (use-package which-key
      :ensure t
      :config
      (which-key-setup-side-window-bottom)
      :init
      (which-key-mode))
#+END_SRC emacs-lisp
